/* Generate the output
 *
 * Debian: apt-get install libgraph-easy-perl
 * Command:
 *   graph-easy --input=libraryDependencies.dot --boxart > libraryDependencies.md
 *   graph-easy --input=libraryDependencies.dot --as_ascii > libraryDependencies.txt
 *   graph-easy --input=libraryDependencies.dot --svg > libraryDependencies.svg
 *   graph-easy --input=libraryDependencies.dot --png
 */

digraph PIConGPU {
    compiler -> cuda;
    compiler -> mpi;
    compiler -> boost;
    compiler -> python;
    compiler -> zlib;
    compiler -> libpng;

    cuda -> mpi [style=dashed label="cuda-awareness"];
    batchSystem -> mpi;
    fileSystem -> mpi [style=dashed label="extra hints"];

    python [label="python-dev"];
    python -> boost [style=dashed label="Boost::Python"];

    hdf5 [label="hdf5-parallel"];
    mpi -> hdf5;
    zlib -> hdf5;
    hdf5 -> libSplash;
    boost -> libSplash [style=dashed label="tools"];

    adios [label="adios-parallel"];
    mpi -> adios;
    zlib -> adios;
    hdf5 -> adios [style=dashed label="optional"];
    fileSystem -> adios [style=dashed label="extra hints"];

    adios2 [label="ADIOS2"];
    mpi -> adios2;
    zlib -> adios2;
    hdf5 -> adios2 [style=dashed label="optional"];
    compiler -> libfabric;
    libfabric -> adios2[style=dashed label="RDMA staging"];

    openpmd [label="openPMD API"];
    adios2 -> openpmd;
    hdf5 -> openpmd;
    nlohmann_json [label="nlohmann_json\n(header-only)\n(internall shipped\nby default)"];
    nlohmann_json -> openpmd[style=dashed"]

    libpng -> PNGwriter;

    trace [label="VampirTrace / Score-P"];
    mpi -> trace;
    cuda -> trace;
}
